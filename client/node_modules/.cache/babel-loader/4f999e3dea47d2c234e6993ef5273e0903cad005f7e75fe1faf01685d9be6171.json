{"ast":null,"code":"import { createSlice, current } from '@reduxjs/toolkit';\nconst initialState = {\n  domains: ['Eldercare', 'Construction']\n};\nconst compareArrays = (a, b) => a.length === b.length && a.every((element, index) => element === b[index]);\nconst domainSlice = createSlice({\n  name: 'domain',\n  initialState,\n  reducers: {\n    addDomainSuccess: (state, action) => {\n      console.log(action.payload);\n      if (state.domains[0] != action.payload[0] && state.domains[1] != action.payload[1]) {\n        state.domains = action.payload;\n      }\n    },\n    registerDomainSuccess: (state, action) => {\n      if (state.domains !== action.payload) {\n        state.domains = action.payload;\n      }\n    },\n    getDomainSuccess: (state, action) => {\n      if (!compareArrays(state.domains, action.payload)) {\n        state.domains = action.payload;\n      }\n    }\n  }\n});\nexport const {\n  addDomainSuccess,\n  registerDomainSuccess,\n  getDomainSuccess\n} = domainSlice.actions;\nexport default domainSlice.reducer;","map":{"version":3,"names":["createSlice","current","initialState","domains","compareArrays","a","b","length","every","element","index","domainSlice","name","reducers","addDomainSuccess","state","action","console","log","payload","registerDomainSuccess","getDomainSuccess","actions","reducer"],"sources":["/Users/timruttinger/Documents/Career/Projects/dola/client/src/domainSlice.js"],"sourcesContent":["import { createSlice, current } from '@reduxjs/toolkit';\n\nconst initialState = {\n    domains: ['Eldercare', 'Construction']\n};\n\nconst compareArrays = (a, b) =>\n  a.length === b.length && a.every((element, index) => element === b[index]);\n\nconst domainSlice = createSlice({\n    name: 'domain',\n    initialState,\n    reducers: {\n        addDomainSuccess: (state, action) => {\n            console.log(action.payload);\n            if (state.domains[0] != action.payload[0] && state.domains[1] != action.payload[1]) {\n                state.domains = action.payload;\n            }\n        },\n        registerDomainSuccess: (state, action) => {\n            if (state.domains !== action.payload) {\n                state.domains = action.payload;\n            }\n        },\n        getDomainSuccess: (state, action) => {\n            if (!compareArrays(state.domains, action.payload)) {\n                state.domains = action.payload;\n            }\n        }\n    }\n});\n\nexport const { addDomainSuccess, registerDomainSuccess, getDomainSuccess } = domainSlice.actions;\nexport default domainSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,OAAO,QAAQ,kBAAkB;AAEvD,MAAMC,YAAY,GAAG;EACjBC,OAAO,EAAE,CAAC,WAAW,EAAE,cAAc;AACzC,CAAC;AAED,MAAMC,aAAa,GAAGA,CAACC,CAAC,EAAEC,CAAC,KACzBD,CAAC,CAACE,MAAM,KAAKD,CAAC,CAACC,MAAM,IAAIF,CAAC,CAACG,KAAK,CAAC,CAACC,OAAO,EAAEC,KAAK,KAAKD,OAAO,KAAKH,CAAC,CAACI,KAAK,CAAC,CAAC;AAE5E,MAAMC,WAAW,GAAGX,WAAW,CAAC;EAC5BY,IAAI,EAAE,QAAQ;EACdV,YAAY;EACZW,QAAQ,EAAE;IACNC,gBAAgB,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACjCC,OAAO,CAACC,GAAG,CAACF,MAAM,CAACG,OAAO,CAAC;MAC3B,IAAIJ,KAAK,CAACZ,OAAO,CAAC,CAAC,CAAC,IAAIa,MAAM,CAACG,OAAO,CAAC,CAAC,CAAC,IAAIJ,KAAK,CAACZ,OAAO,CAAC,CAAC,CAAC,IAAIa,MAAM,CAACG,OAAO,CAAC,CAAC,CAAC,EAAE;QAChFJ,KAAK,CAACZ,OAAO,GAAGa,MAAM,CAACG,OAAO;MAClC;IACJ,CAAC;IACDC,qBAAqB,EAAEA,CAACL,KAAK,EAAEC,MAAM,KAAK;MACtC,IAAID,KAAK,CAACZ,OAAO,KAAKa,MAAM,CAACG,OAAO,EAAE;QAClCJ,KAAK,CAACZ,OAAO,GAAGa,MAAM,CAACG,OAAO;MAClC;IACJ,CAAC;IACDE,gBAAgB,EAAEA,CAACN,KAAK,EAAEC,MAAM,KAAK;MACjC,IAAI,CAACZ,aAAa,CAACW,KAAK,CAACZ,OAAO,EAAEa,MAAM,CAACG,OAAO,CAAC,EAAE;QAC/CJ,KAAK,CAACZ,OAAO,GAAGa,MAAM,CAACG,OAAO;MAClC;IACJ;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEL,gBAAgB;EAAEM,qBAAqB;EAAEC;AAAiB,CAAC,GAAGV,WAAW,CAACW,OAAO;AAChG,eAAeX,WAAW,CAACY,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}