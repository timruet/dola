{"ast":null,"code":"import { useNavigate, useSelector } from 'react-router-dom';\nimport { store } from './store';\nexport const vocabService = {\n  async setVocabulary(userid, domain) {\n    let res = await fetch('http://localhost:8000/api/setVocabulary', {\n      credentials: 'include',\n      mode: \"cors\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'post',\n      body: JSON.stringify({\n        userid: userid,\n        domain: domain\n      })\n    });\n    if (!res.ok) {\n      throw new Error(res.status);\n    }\n    res = await res.json();\n  },\n  async getVocabulary(userid, domain) {\n    let res = await fetch('http://localhost:8000/api/getVocabulary', {\n      credentials: 'include',\n      mode: \"cors\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'post',\n      body: JSON.stringify({\n        userid: userid,\n        domain: domain\n      })\n    });\n    if (!res.ok) {\n      throw new Error(res.status);\n    }\n    res = await res.json();\n    return res;\n  }\n};","map":{"version":3,"names":["useNavigate","useSelector","store","vocabService","setVocabulary","userid","domain","res","fetch","credentials","mode","headers","method","body","JSON","stringify","ok","Error","status","json","getVocabulary"],"sources":["/Users/timruttinger/Documents/Career/Projects/dola/client/src/vocabService.js"],"sourcesContent":["import { useNavigate, useSelector } from 'react-router-dom';\nimport { store } from './store'\n\n\nexport const vocabService = {\n    async setVocabulary(userid, domain) {\n        let res = await fetch('http://localhost:8000/api/setVocabulary', { credentials: 'include', mode: \"cors\", headers: { 'Content-Type': 'application/json' }, method: 'post', body: JSON.stringify({ userid: userid, domain: domain }) });\n        if (!res.ok) {\n            throw new Error(res.status);\n        }\n        res = await res.json();\n    },\n\n    async getVocabulary(userid, domain){\n        let res = await fetch('http://localhost:8000/api/getVocabulary', { credentials: 'include', mode: \"cors\", headers: { 'Content-Type': 'application/json' }, method: 'post', body: JSON.stringify({ userid: userid, domain: domain }) });\n        if (!res.ok) {\n            throw new Error(res.status);\n        }\n        res = await res.json();\n        return res;\n    }\n};"],"mappings":"AAAA,SAASA,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAC3D,SAASC,KAAK,QAAQ,SAAS;AAG/B,OAAO,MAAMC,YAAY,GAAG;EACxB,MAAMC,aAAaA,CAACC,MAAM,EAAEC,MAAM,EAAE;IAChC,IAAIC,GAAG,GAAG,MAAMC,KAAK,CAAC,yCAAyC,EAAE;MAAEC,WAAW,EAAE,SAAS;MAAEC,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAAEC,MAAM,EAAE,MAAM;MAAEC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEV,MAAM,EAAEA,MAAM;QAAEC,MAAM,EAAEA;MAAO,CAAC;IAAE,CAAC,CAAC;IACrO,IAAI,CAACC,GAAG,CAACS,EAAE,EAAE;MACT,MAAM,IAAIC,KAAK,CAACV,GAAG,CAACW,MAAM,CAAC;IAC/B;IACAX,GAAG,GAAG,MAAMA,GAAG,CAACY,IAAI,CAAC,CAAC;EAC1B,CAAC;EAED,MAAMC,aAAaA,CAACf,MAAM,EAAEC,MAAM,EAAC;IAC/B,IAAIC,GAAG,GAAG,MAAMC,KAAK,CAAC,yCAAyC,EAAE;MAAEC,WAAW,EAAE,SAAS;MAAEC,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAAEC,MAAM,EAAE,MAAM;MAAEC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEV,MAAM,EAAEA,MAAM;QAAEC,MAAM,EAAEA;MAAO,CAAC;IAAE,CAAC,CAAC;IACrO,IAAI,CAACC,GAAG,CAACS,EAAE,EAAE;MACT,MAAM,IAAIC,KAAK,CAACV,GAAG,CAACW,MAAM,CAAC;IAC/B;IACAX,GAAG,GAAG,MAAMA,GAAG,CAACY,IAAI,CAAC,CAAC;IACtB,OAAOZ,GAAG;EACd;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}