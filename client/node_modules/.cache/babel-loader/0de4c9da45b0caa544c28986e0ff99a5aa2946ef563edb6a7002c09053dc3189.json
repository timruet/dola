{"ast":null,"code":"import { registerDomainSuccess, getDomainSuccess, addDomainSuccess } from './domainSlice';\nimport { useNavigate } from 'react-router-dom';\nimport { store } from './store';\nexport const domainService = {\n  async addDomain(userid, domain) {\n    if (userid == null) {\n      alert('You need to be logged in to add a new domain');\n    } else {\n      let res = await fetch('http://localhost:8000/api/addUserDomains', {\n        credentials: 'include',\n        mode: \"cors\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        method: 'post',\n        body: JSON.stringify({\n          id: userid,\n          domain: domain\n        })\n      });\n      if (!res.ok) {\n        throw new Error(res.status);\n      }\n      res = await res.json();\n      console.log(res);\n      store.dispatch(addDomainSuccess(res));\n    }\n  },\n  async registerDomain(userid) {\n    let res = await fetch('http://localhost:8000/api/createUserDomains', {\n      credentials: 'include',\n      mode: \"cors\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'post',\n      body: JSON.stringify({\n        id: userid\n      })\n    });\n    if (!res.ok) {\n      throw new Error(res.status);\n    }\n    res = res.json();\n    store.dispatch(registerDomainSuccess(res.domains));\n  },\n  async getDomains(userid) {\n    let res = await fetch('http://localhost:8000/api/getUserDomains', {\n      credentials: 'include',\n      mode: \"cors\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'post',\n      body: JSON.stringify({\n        id: userid\n      })\n    });\n    if (!res.ok) {\n      throw new Error(res.status);\n    }\n    res = await res.json();\n    store.dispatch(getDomainSuccess(res));\n  }\n};","map":{"version":3,"names":["registerDomainSuccess","getDomainSuccess","addDomainSuccess","useNavigate","store","domainService","addDomain","userid","domain","alert","res","fetch","credentials","mode","headers","method","body","JSON","stringify","id","ok","Error","status","json","console","log","dispatch","registerDomain","domains","getDomains"],"sources":["/Users/timruttinger/Documents/Career/Projects/dola/client/src/domainService.js"],"sourcesContent":["import { registerDomainSuccess, getDomainSuccess, addDomainSuccess } from './domainSlice';\nimport { useNavigate } from 'react-router-dom';\nimport { store } from './store'\n\n\nexport const domainService = {\n    async addDomain(userid, domain) {\n        if (userid == null) {\n            alert('You need to be logged in to add a new domain');\n        }\n        else {\n            let res = await fetch('http://localhost:8000/api/addUserDomains', { credentials: 'include', mode: \"cors\", headers: { 'Content-Type': 'application/json' }, method: 'post', body: JSON.stringify({ id: userid, domain: domain }) });\n            if (!res.ok) {\n                throw new Error(res.status);\n            }\n            res = await res.json();\n            console.log(res);\n            store.dispatch(addDomainSuccess(res));\n        }\n    },\n    async registerDomain(userid) {\n        let res = await fetch('http://localhost:8000/api/createUserDomains', { credentials: 'include', mode: \"cors\", headers: { 'Content-Type': 'application/json' }, method: 'post', body: JSON.stringify({ id: userid }) });\n        if (!res.ok) {\n            throw new Error(res.status);\n        }\n        res = res.json();\n        store.dispatch(registerDomainSuccess(res.domains));\n    },\n    async getDomains(userid) {\n        let res = await fetch('http://localhost:8000/api/getUserDomains', { credentials: 'include', mode: \"cors\", headers: { 'Content-Type': 'application/json' }, method: 'post', body: JSON.stringify({ id: userid }) });\n        if (!res.ok) {\n            throw new Error(res.status);\n        }\n        res = await res.json();\n        store.dispatch(getDomainSuccess(res));\n    },\n};"],"mappings":"AAAA,SAASA,qBAAqB,EAAEC,gBAAgB,EAAEC,gBAAgB,QAAQ,eAAe;AACzF,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,KAAK,QAAQ,SAAS;AAG/B,OAAO,MAAMC,aAAa,GAAG;EACzB,MAAMC,SAASA,CAACC,MAAM,EAAEC,MAAM,EAAE;IAC5B,IAAID,MAAM,IAAI,IAAI,EAAE;MAChBE,KAAK,CAAC,8CAA8C,CAAC;IACzD,CAAC,MACI;MACD,IAAIC,GAAG,GAAG,MAAMC,KAAK,CAAC,0CAA0C,EAAE;QAAEC,WAAW,EAAE,SAAS;QAAEC,IAAI,EAAE,MAAM;QAAEC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAAEC,MAAM,EAAE,MAAM;QAAEC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,EAAE,EAAEZ,MAAM;UAAEC,MAAM,EAAEA;QAAO,CAAC;MAAE,CAAC,CAAC;MAClO,IAAI,CAACE,GAAG,CAACU,EAAE,EAAE;QACT,MAAM,IAAIC,KAAK,CAACX,GAAG,CAACY,MAAM,CAAC;MAC/B;MACAZ,GAAG,GAAG,MAAMA,GAAG,CAACa,IAAI,CAAC,CAAC;MACtBC,OAAO,CAACC,GAAG,CAACf,GAAG,CAAC;MAChBN,KAAK,CAACsB,QAAQ,CAACxB,gBAAgB,CAACQ,GAAG,CAAC,CAAC;IACzC;EACJ,CAAC;EACD,MAAMiB,cAAcA,CAACpB,MAAM,EAAE;IACzB,IAAIG,GAAG,GAAG,MAAMC,KAAK,CAAC,6CAA6C,EAAE;MAAEC,WAAW,EAAE,SAAS;MAAEC,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAAEC,MAAM,EAAE,MAAM;MAAEC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,EAAE,EAAEZ;MAAO,CAAC;IAAE,CAAC,CAAC;IACrN,IAAI,CAACG,GAAG,CAACU,EAAE,EAAE;MACT,MAAM,IAAIC,KAAK,CAACX,GAAG,CAACY,MAAM,CAAC;IAC/B;IACAZ,GAAG,GAAGA,GAAG,CAACa,IAAI,CAAC,CAAC;IAChBnB,KAAK,CAACsB,QAAQ,CAAC1B,qBAAqB,CAACU,GAAG,CAACkB,OAAO,CAAC,CAAC;EACtD,CAAC;EACD,MAAMC,UAAUA,CAACtB,MAAM,EAAE;IACrB,IAAIG,GAAG,GAAG,MAAMC,KAAK,CAAC,0CAA0C,EAAE;MAAEC,WAAW,EAAE,SAAS;MAAEC,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAAEC,MAAM,EAAE,MAAM;MAAEC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,EAAE,EAAEZ;MAAO,CAAC;IAAE,CAAC,CAAC;IAClN,IAAI,CAACG,GAAG,CAACU,EAAE,EAAE;MACT,MAAM,IAAIC,KAAK,CAACX,GAAG,CAACY,MAAM,CAAC;IAC/B;IACAZ,GAAG,GAAG,MAAMA,GAAG,CAACa,IAAI,CAAC,CAAC;IACtBnB,KAAK,CAACsB,QAAQ,CAACzB,gBAAgB,CAACS,GAAG,CAAC,CAAC;EACzC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}