{"ast":null,"code":"import { registerDomainSuccess, getDomainSuccess, addDomainSuccess } from './domainSlice';\nimport { useNavigate } from 'react-router-dom';\nimport { store } from './store';\nexport const domainService = {\n  async addDomain(id, domain) {\n    const res = await fetch('http://localhost:8000/api/addUserDomains', {\n      credentials: 'include',\n      mode: \"cors\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'post',\n      body: JSON.stringify({\n        id: id,\n        domain: domain\n      })\n    });\n    if (!res.ok) {\n      throw new Error(res.status);\n    }\n    // Dispatch the loginSuccess action with the user data\n    store.dispatch(addDomainSuccess(domain));\n  },\n  async registerDomain(userid) {\n    let res = await fetch('http://localhost:8000/api/createUserDomains', {\n      credentials: 'include',\n      mode: \"cors\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'post',\n      body: JSON.stringify({\n        id: userid\n      })\n    });\n    if (!res.ok) {\n      throw new Error(res.status);\n    }\n    // Dispatch the loginSuccess action with the user data\n    res = res.json();\n    store.dispatch(registerDomainSuccess(res.domains));\n  },\n  async getDomains(userid) {\n    let res = await fetch('http://localhost:8000/api/getUserDomains', {\n      credentials: 'include',\n      mode: \"cors\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'post',\n      body: JSON.stringify({\n        id: userid\n      })\n    });\n    if (!res.ok) {\n      throw new Error(res.status);\n    }\n    // Dispatch the loginSuccess action with the user data\n    res = await res.json();\n    store.dispatch(getDomainSuccess(res));\n  }\n};","map":{"version":3,"names":["registerDomainSuccess","getDomainSuccess","addDomainSuccess","useNavigate","store","domainService","addDomain","id","domain","res","fetch","credentials","mode","headers","method","body","JSON","stringify","ok","Error","status","dispatch","registerDomain","userid","json","domains","getDomains"],"sources":["/Users/timruttinger/Documents/Career/Projects/dola/client/src/domainService.js"],"sourcesContent":["import { registerDomainSuccess, getDomainSuccess, addDomainSuccess } from './domainSlice';\nimport { useNavigate } from 'react-router-dom';\nimport { store } from './store'\n\n\nexport const domainService = {\n    async addDomain(id, domain) {\n        const res = await fetch('http://localhost:8000/api/addUserDomains', { credentials: 'include', mode: \"cors\", headers: { 'Content-Type': 'application/json' }, method: 'post', body: JSON.stringify({id :id, domain: domain}) });\n        if (!res.ok) {\n            throw new Error(res.status);\n        }\n        // Dispatch the loginSuccess action with the user data\n        store.dispatch(addDomainSuccess(domain));\n    },\n    async registerDomain(userid) {\n        let res = await fetch('http://localhost:8000/api/createUserDomains', { credentials: 'include', mode: \"cors\", headers: { 'Content-Type': 'application/json' }, method: 'post', body: JSON.stringify({id: userid})});\n        if (!res.ok) {\n            throw new Error(res.status);\n        }\n        // Dispatch the loginSuccess action with the user data\n        res = res.json();\n        store.dispatch(registerDomainSuccess(res.domains));\n    },\n    async getDomains(userid) {\n        let res = await fetch('http://localhost:8000/api/getUserDomains', { credentials: 'include', mode: \"cors\", headers: { 'Content-Type': 'application/json' }, method: 'post', body: JSON.stringify({id: userid})});\n        if (!res.ok) {\n            throw new Error(res.status);\n        }\n        // Dispatch the loginSuccess action with the user data\n        res = await res.json();\n        store.dispatch(getDomainSuccess(res));\n    },\n};"],"mappings":"AAAA,SAASA,qBAAqB,EAAEC,gBAAgB,EAAEC,gBAAgB,QAAQ,eAAe;AACzF,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,KAAK,QAAQ,SAAS;AAG/B,OAAO,MAAMC,aAAa,GAAG;EACzB,MAAMC,SAASA,CAACC,EAAE,EAAEC,MAAM,EAAE;IACxB,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,0CAA0C,EAAE;MAAEC,WAAW,EAAE,SAAS;MAAEC,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAAEC,MAAM,EAAE,MAAM;MAAEC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAACV,EAAE,EAAEA,EAAE;QAAEC,MAAM,EAAEA;MAAM,CAAC;IAAE,CAAC,CAAC;IAC9N,IAAI,CAACC,GAAG,CAACS,EAAE,EAAE;MACT,MAAM,IAAIC,KAAK,CAACV,GAAG,CAACW,MAAM,CAAC;IAC/B;IACA;IACAhB,KAAK,CAACiB,QAAQ,CAACnB,gBAAgB,CAACM,MAAM,CAAC,CAAC;EAC5C,CAAC;EACD,MAAMc,cAAcA,CAACC,MAAM,EAAE;IACzB,IAAId,GAAG,GAAG,MAAMC,KAAK,CAAC,6CAA6C,EAAE;MAAEC,WAAW,EAAE,SAAS;MAAEC,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAAEC,MAAM,EAAE,MAAM;MAAEC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAACV,EAAE,EAAEgB;MAAM,CAAC;IAAC,CAAC,CAAC;IAClN,IAAI,CAACd,GAAG,CAACS,EAAE,EAAE;MACT,MAAM,IAAIC,KAAK,CAACV,GAAG,CAACW,MAAM,CAAC;IAC/B;IACA;IACAX,GAAG,GAAGA,GAAG,CAACe,IAAI,CAAC,CAAC;IAChBpB,KAAK,CAACiB,QAAQ,CAACrB,qBAAqB,CAACS,GAAG,CAACgB,OAAO,CAAC,CAAC;EACtD,CAAC;EACD,MAAMC,UAAUA,CAACH,MAAM,EAAE;IACrB,IAAId,GAAG,GAAG,MAAMC,KAAK,CAAC,0CAA0C,EAAE;MAAEC,WAAW,EAAE,SAAS;MAAEC,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAAEC,MAAM,EAAE,MAAM;MAAEC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAACV,EAAE,EAAEgB;MAAM,CAAC;IAAC,CAAC,CAAC;IAC/M,IAAI,CAACd,GAAG,CAACS,EAAE,EAAE;MACT,MAAM,IAAIC,KAAK,CAACV,GAAG,CAACW,MAAM,CAAC;IAC/B;IACA;IACAX,GAAG,GAAG,MAAMA,GAAG,CAACe,IAAI,CAAC,CAAC;IACtBpB,KAAK,CAACiB,QAAQ,CAACpB,gBAAgB,CAACQ,GAAG,CAAC,CAAC;EACzC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}