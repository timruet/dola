{"ast":null,"code":"import { registerDomainSuccess, getDomainSuccess, addDomainSuccess } from './domainSlice';\nimport { useNavigate } from 'react-router-dom';\nimport { store } from './store';\nexport const domainService = {\n  async addDomain(userid, domain) {\n    let res = await fetch('http://localhost:8000/api/addUserDomains', {\n      credentials: 'include',\n      mode: \"cors\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'post',\n      body: JSON.stringify({\n        id: userid,\n        domain: domain\n      })\n    });\n    if (!res.ok) {\n      throw new Error(res.status);\n    }\n    res = await res.json();\n    console.log(res);\n    store.dispatch(addDomainSuccess(res));\n  },\n  async registerDomain(userid) {\n    let res = await fetch('http://localhost:8000/api/createUserDomains', {\n      credentials: 'include',\n      mode: \"cors\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'post',\n      body: JSON.stringify({\n        id: userid\n      })\n    });\n    if (!res.ok) {\n      throw new Error(res.status);\n    }\n    res = res.json();\n    store.dispatch(registerDomainSuccess(res.domains));\n  },\n  async getDomains(userid) {\n    let res = await fetch('http://localhost:8000/api/getUserDomains', {\n      credentials: 'include',\n      mode: \"cors\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'post',\n      body: JSON.stringify({\n        id: userid\n      })\n    });\n    if (!res.ok) {\n      throw new Error(res.status);\n    }\n    res = await res.json();\n    store.dispatch(getDomainSuccess(res));\n  }\n};","map":{"version":3,"names":["registerDomainSuccess","getDomainSuccess","addDomainSuccess","useNavigate","store","domainService","addDomain","userid","domain","res","fetch","credentials","mode","headers","method","body","JSON","stringify","id","ok","Error","status","json","console","log","dispatch","registerDomain","domains","getDomains"],"sources":["/Users/timruttinger/Documents/Career/Projects/dola/client/src/domainService.js"],"sourcesContent":["import { registerDomainSuccess, getDomainSuccess, addDomainSuccess } from './domainSlice';\nimport { useNavigate } from 'react-router-dom';\nimport { store } from './store'\n\n\nexport const domainService = {\n    async addDomain(userid, domain) {\n        let res = await fetch('http://localhost:8000/api/addUserDomains', { credentials: 'include', mode: \"cors\", headers: { 'Content-Type': 'application/json' }, method: 'post', body: JSON.stringify({ id: userid, domain: domain }) });\n        if (!res.ok) {\n            throw new Error(res.status);\n        }\n        res = await res.json();\n        console.log(res);\n        store.dispatch(addDomainSuccess(res));\n    },\n    async registerDomain(userid) {\n        let res = await fetch('http://localhost:8000/api/createUserDomains', { credentials: 'include', mode: \"cors\", headers: { 'Content-Type': 'application/json' }, method: 'post', body: JSON.stringify({ id: userid }) });\n        if (!res.ok) {\n            throw new Error(res.status);\n        }\n        res = res.json();\n        store.dispatch(registerDomainSuccess(res.domains));\n    },\n    async getDomains(userid) {\n        let res = await fetch('http://localhost:8000/api/getUserDomains', { credentials: 'include', mode: \"cors\", headers: { 'Content-Type': 'application/json' }, method: 'post', body: JSON.stringify({ id: userid }) });\n        if (!res.ok) {\n            throw new Error(res.status);\n        }\n        res = await res.json();\n        store.dispatch(getDomainSuccess(res));\n    },\n};"],"mappings":"AAAA,SAASA,qBAAqB,EAAEC,gBAAgB,EAAEC,gBAAgB,QAAQ,eAAe;AACzF,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,KAAK,QAAQ,SAAS;AAG/B,OAAO,MAAMC,aAAa,GAAG;EACzB,MAAMC,SAASA,CAACC,MAAM,EAAEC,MAAM,EAAE;IAC5B,IAAIC,GAAG,GAAG,MAAMC,KAAK,CAAC,0CAA0C,EAAE;MAAEC,WAAW,EAAE,SAAS;MAAEC,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAAEC,MAAM,EAAE,MAAM;MAAEC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,EAAE,EAAEX,MAAM;QAAEC,MAAM,EAAEA;MAAO,CAAC;IAAE,CAAC,CAAC;IAClO,IAAI,CAACC,GAAG,CAACU,EAAE,EAAE;MACT,MAAM,IAAIC,KAAK,CAACX,GAAG,CAACY,MAAM,CAAC;IAC/B;IACAZ,GAAG,GAAG,MAAMA,GAAG,CAACa,IAAI,CAAC,CAAC;IACtBC,OAAO,CAACC,GAAG,CAACf,GAAG,CAAC;IAChBL,KAAK,CAACqB,QAAQ,CAACvB,gBAAgB,CAACO,GAAG,CAAC,CAAC;EACzC,CAAC;EACD,MAAMiB,cAAcA,CAACnB,MAAM,EAAE;IACzB,IAAIE,GAAG,GAAG,MAAMC,KAAK,CAAC,6CAA6C,EAAE;MAAEC,WAAW,EAAE,SAAS;MAAEC,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAAEC,MAAM,EAAE,MAAM;MAAEC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,EAAE,EAAEX;MAAO,CAAC;IAAE,CAAC,CAAC;IACrN,IAAI,CAACE,GAAG,CAACU,EAAE,EAAE;MACT,MAAM,IAAIC,KAAK,CAACX,GAAG,CAACY,MAAM,CAAC;IAC/B;IACAZ,GAAG,GAAGA,GAAG,CAACa,IAAI,CAAC,CAAC;IAChBlB,KAAK,CAACqB,QAAQ,CAACzB,qBAAqB,CAACS,GAAG,CAACkB,OAAO,CAAC,CAAC;EACtD,CAAC;EACD,MAAMC,UAAUA,CAACrB,MAAM,EAAE;IACrB,IAAIE,GAAG,GAAG,MAAMC,KAAK,CAAC,0CAA0C,EAAE;MAAEC,WAAW,EAAE,SAAS;MAAEC,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAAEC,MAAM,EAAE,MAAM;MAAEC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,EAAE,EAAEX;MAAO,CAAC;IAAE,CAAC,CAAC;IAClN,IAAI,CAACE,GAAG,CAACU,EAAE,EAAE;MACT,MAAM,IAAIC,KAAK,CAACX,GAAG,CAACY,MAAM,CAAC;IAC/B;IACAZ,GAAG,GAAG,MAAMA,GAAG,CAACa,IAAI,CAAC,CAAC;IACtBlB,KAAK,CAACqB,QAAQ,CAACxB,gBAAgB,CAACQ,GAAG,CAAC,CAAC;EACzC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}