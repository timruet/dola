[{"/Users/timruttinger/Documents/Career/Projects/dola/client/src/index.js":"1","/Users/timruttinger/Documents/Career/Projects/dola/client/src/App.js":"2","/Users/timruttinger/Documents/Career/Projects/dola/client/src/reportWebVitals.js":"3","/Users/timruttinger/Documents/Career/Projects/dola/client/src/Pages/Home.js":"4","/Users/timruttinger/Documents/Career/Projects/dola/client/src/Pages/Vocabulary.js":"5","/Users/timruttinger/Documents/Career/Projects/dola/client/src/Pages/Register.js":"6","/Users/timruttinger/Documents/Career/Projects/dola/client/src/Pages/Quizz.js":"7","/Users/timruttinger/Documents/Career/Projects/dola/client/src/Pages/Login.js":"8"},{"size":628,"mtime":1698595080642,"results":"9","hashOfConfig":"10"},{"size":9612,"mtime":1701180780138,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1692298254163,"results":"12","hashOfConfig":"10"},{"size":4988,"mtime":1718137650684,"results":"13","hashOfConfig":"10"},{"size":2861,"mtime":1699209916907,"results":"14","hashOfConfig":"10"},{"size":7001,"mtime":1701179746732,"results":"15","hashOfConfig":"10"},{"size":2545,"mtime":1699209880333,"results":"16","hashOfConfig":"10"},{"size":5456,"mtime":1701193049855,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"15c32ht",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"21"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"21"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"21"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"21"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"21"},"/Users/timruttinger/Documents/Career/Projects/dola/client/src/index.js",[],[],[],"/Users/timruttinger/Documents/Career/Projects/dola/client/src/App.js",["48","49","50","51","52","53","54","55"],[],"import 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport { Routes, Route } from 'react-router-dom';\nimport { NavLink, useNavigate } from 'react-router-dom';\nimport volcano from \"./images/volcano-cropped.png\"\nimport {Helmet} from 'react-helmet';\n\n\n\nimport './dist/output.css';\nimport Home from './Pages/Home';\nimport Vocabulary from './Pages/Vocabulary';\nimport Quizz from './Pages/Quizz';\nimport Login from './Pages/Login';\nimport Register from './Pages/Register';\n\n\nfunction App() {\n\n  return (\n    <>\n      {/* <Helmet>\n        <style>{'body { background-color: whitesmoke; }'}</style>\n      </Helmet>  */}\n      <NavigationBar />\n      <Routes>\n        {/* <Route path=\"/login\" element={<Login/>} /> */}\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/home\" element={<Home />} />\n        <Route path=\"/domain/eldercare\" element={<Vocabulary domain=\"eldercare\" />} />\n        <Route path=\"/domain/construction\" element={<Vocabulary domain=\"construction\" />} />\n        <Route path=\"/domain/construction/quizz\" element={<Quizz domain=\"construction\" />} />\n        <Route path=\"/domain/eldercare/quizz\" element={<Quizz domain=\"eldercare\" />} />\n        <Route path=\"/login\" element={<Login />} />\n        <Route path=\"/register\" element={<Register />} />\n      </Routes>\n    </>\n  )\n}\n\nfunction NavigationBar() {\n  const navigate = useNavigate();\n  const handleSelect = ((eventKey) => {\n    navigate(eventKey);\n  });\n\n  // function requireAuth(nextState, replace, next) {\n  //   if (!authenticated) {\n  //     replace({\n  //       pathname: \"/login\",\n  //       state: {nextPathname: nextState.location.pathname}\n  //     });\n  //   }\n  //   next();\n  // }\n\n  return (\n    <>\n    <nav className=\"bg-gray-800 shadow-md top-0 left-0 w-screen\">\n      <div className=\"relative max-w-screen-xl flex flex-wrap items-center justify-start mx-auto p-3 w-screen\">\n        <a href=\"/home\" className=\"flex items-center hover:bg-gray-700 px-3 rounded-md focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white\">\n          <img src={volcano} className=\"h-6 mr-3\" />\n          <span className=\"self-center text-xl font-semibold whitespace-nowrap text-white \">dola</span>\n        </a>\n        <a href=\"/profile\" className=\"flex items-center  hover:bg-gray-700 px-3 rounded-md focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white\">\n          <span className=\"self-center text-xl font-semibold whitespace-nowrap text-white \">Profile</span>\n        </a>\n      </div>\n    </nav>\n    </>\n\n/* <nav class=\"bg-gray-800\">\n  <div class=\"mx-auto max-w-7xl px-2 sm:px-6 lg:px-8\">\n    <div class=\"relative flex h-16 items-center justify-between\">\n      <div class=\"absolute inset-y-0 left-0 flex items-center sm:hidden\">\n        <!-- Mobile menu button-->\n        <button type=\"button\" class=\"relative inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white\" aria-controls=\"mobile-menu\" aria-expanded=\"false\">\n          <span class=\"absolute -inset-0.5\"></span>\n          <span class=\"sr-only\">Open main menu</span>\n          <!--\n            Icon when menu is closed.\n\n            Menu open: \"hidden\", Menu closed: \"block\"\n          -->\n          <svg class=\"block h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" aria-hidden=\"true\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5\" />\n          </svg>\n          <!--\n            Icon when menu is open.\n\n            Menu open: \"block\", Menu closed: \"hidden\"\n          -->\n          <svg class=\"hidden h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" aria-hidden=\"true\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M6 18L18 6M6 6l12 12\" />\n          </svg>\n        </button>\n      </div>\n      <div class=\"flex flex-1 items-center justify-center sm:items-stretch sm:justify-start\">\n        <div class=\"flex flex-shrink-0 items-center\">\n          <img class=\"h-8 w-auto\" src=\"https://tailwindui.com/img/logos/mark.svg?color=indigo&shade=500\" alt=\"Your Company\">\n        </div>\n        <div class=\"hidden sm:ml-6 sm:block\">\n          <div class=\"flex space-x-4\">\n            <!-- Current: \"bg-gray-900 text-white\", Default: \"text-gray-300 hover:bg-gray-700 hover:text-white\" -->\n            <a href=\"#\" class=\"bg-gray-900 text-white rounded-md px-3 py-2 text-sm font-medium\" aria-current=\"page\">Dashboard</a>\n            <a href=\"#\" class=\"text-gray-300 hover:bg-gray-700 hover:text-white rounded-md px-3 py-2 text-sm font-medium\">Team</a>\n            <a href=\"#\" class=\"text-gray-300 hover:bg-gray-700 hover:text-white rounded-md px-3 py-2 text-sm font-medium\">Projects</a>\n            <a href=\"#\" class=\"text-gray-300 hover:bg-gray-700 hover:text-white rounded-md px-3 py-2 text-sm font-medium\">Calendar</a>\n          </div>\n        </div>\n      </div>\n      <div class=\"absolute inset-y-0 right-0 flex items-center pr-2 sm:static sm:inset-auto sm:ml-6 sm:pr-0\">\n        <button type=\"button\" class=\"relative rounded-full bg-gray-800 p-1 text-gray-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-gray-800\">\n          <span class=\"absolute -inset-1.5\"></span>\n          <span class=\"sr-only\">View notifications</span>\n          <svg class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" aria-hidden=\"true\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M14.857 17.082a23.848 23.848 0 005.454-1.31A8.967 8.967 0 0118 9.75v-.7V9A6 6 0 006 9v.75a8.967 8.967 0 01-2.312 6.022c1.733.64 3.56 1.085 5.455 1.31m5.714 0a24.255 24.255 0 01-5.714 0m5.714 0a3 3 0 11-5.714 0\" />\n          </svg>\n        </button>\n\n        <!-- Profile dropdown -->\n        <div class=\"relative ml-3\">\n          <div>\n            <button type=\"button\" class=\"relative flex rounded-full bg-gray-800 text-sm focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-gray-800\" id=\"user-menu-button\" aria-expanded=\"false\" aria-haspopup=\"true\">\n              <span class=\"absolute -inset-1.5\"></span>\n              <span class=\"sr-only\">Open user menu</span>\n              <img class=\"h-8 w-8 rounded-full\" src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\" alt=\"\">\n            </button>\n          </div>\n\n          <!--\n            Dropdown menu, show/hide based on menu state.\n\n            Entering: \"transition ease-out duration-100\"\n              From: \"transform opacity-0 scale-95\"\n              To: \"transform opacity-100 scale-100\"\n            Leaving: \"transition ease-in duration-75\"\n              From: \"transform opacity-100 scale-100\"\n              To: \"transform opacity-0 scale-95\"\n          -->\n          <div class=\"absolute right-0 z-10 mt-2 w-48 origin-top-right rounded-md bg-white py-1 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none\" role=\"menu\" aria-orientation=\"vertical\" aria-labelledby=\"user-menu-button\" tabindex=\"-1\">\n            <!-- Active: \"bg-gray-100\", Not Active: \"\" -->\n            <a href=\"#\" class=\"block px-4 py-2 text-sm text-gray-700\" role=\"menuitem\" tabindex=\"-1\" id=\"user-menu-item-0\">Your Profile</a>\n            <a href=\"#\" class=\"block px-4 py-2 text-sm text-gray-700\" role=\"menuitem\" tabindex=\"-1\" id=\"user-menu-item-1\">Settings</a>\n            <a href=\"#\" class=\"block px-4 py-2 text-sm text-gray-700\" role=\"menuitem\" tabindex=\"-1\" id=\"user-menu-item-2\">Sign out</a>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Mobile menu, show/hide based on menu state. -->\n  <div class=\"sm:hidden\" id=\"mobile-menu\">\n    <div class=\"space-y-1 px-2 pb-3 pt-2\">\n      <!-- Current: \"bg-gray-900 text-white\", Default: \"text-gray-300 hover:bg-gray-700 hover:text-white\" -->\n      <a href=\"#\" class=\"bg-gray-900 text-white block rounded-md px-3 py-2 text-base font-medium\" aria-current=\"page\">Dashboard</a>\n      <a href=\"#\" class=\"text-gray-300 hover:bg-gray-700 hover:text-white block rounded-md px-3 py-2 text-base font-medium\">Team</a>\n      <a href=\"#\" class=\"text-gray-300 hover:bg-gray-700 hover:text-white block rounded-md px-3 py-2 text-base font-medium\">Projects</a>\n      <a href=\"#\" class=\"text-gray-300 hover:bg-gray-700 hover:text-white block rounded-md px-3 py-2 text-base font-medium\">Calendar</a>\n    </div>\n  </div>\n</nav> */\n\n    // <>\n    //   <Navbar className=\"navbar navbar-dark bg-dark\">\n    //   <Container >\n    //   <NavLink to=\"/home\" className=\"brand\"><Navbar.Brand >dola</Navbar.Brand></NavLink>\n    //     <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n    //     <Navbar.Collapse id=\"basic-navbar-nav\">\n    //       <Nav className=\"me-auto\" onSelect={handleSelect}>\n    //         <NavDropdown title=\"Domain\" id=\"basic-nav-dropdown\">\n    //         <NavDropdown.Item eventKey='/eldercare'><div  className=\"Link\" to=\"/eldercare\" >Elder Care</div></NavDropdown.Item>\n    //         <NavDropdown.Item eventKey='/construction'><div className=\"Link\" to=\"/construction\">Construction</div></NavDropdown.Item>\n    //         </NavDropdown>\n    //       </Nav>\n    //     </Navbar.Collapse>\n    //   </Container>\n    // </Navbar> \n    // </>  \n  );\n}\n\n\n\nexport default App;\n","/Users/timruttinger/Documents/Career/Projects/dola/client/src/reportWebVitals.js",[],[],"/Users/timruttinger/Documents/Career/Projects/dola/client/src/Pages/Home.js",["56"],[],"/Users/timruttinger/Documents/Career/Projects/dola/client/src/Pages/Vocabulary.js",["57"],[],"import React, { useState, useEffect } from 'react';\nimport '../dist/output.css';\n\n\n\nexport default function Vocabulary({ domain }) {\n\n  return (\n    <>\n      <VocabTable domain={domain} />\n    </>\n  )\n}\n\n\nfunction VocabTable({ domain }) {\n  const [vocabulary, setVocabulary] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const res = await fetch(`http://localhost:8000/api/table?domain=${domain}`);\n      const data = await res.json();\n      setVocabulary(data);\n    }\n    fetchData();\n  }, [domain]);\n\n  return (\n    <>\n      <div className=\"relative justify-center flex p-4\">\n        <table class=\"table-fixed bg-white second:rounded-tl-lg second:rounded-tr-lg last:rounded-bl-lg last:rounded-br-lg border-collapse\">\n          <thead>\n            <tr className= \"p-3 border-b-8 bg-gray-200\">\n              <th className=\"bg-gray-50 rounded-lg\">\n                <button className=\"text-white bg-gray-800 hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-300 font-medium rounded-lg text-sm px-3 py-2 mr-2 mb-2\">\n                  <a href=\"#\" className=\"\">Edit</a>\n                </button>\n              </th>\n              <th className=\"bg-gray-50 rounded-lg\">\n                <button className=\"text-white bg-gray-800 hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-300 font-medium rounded-lg text-sm px-3 py-2 mr-2 mb-2\">\n                  <a href={`/domain/${domain}/quizz`} className=\"\">Study</a>\n                </button>\n              </th>\n              <th className=\"bg-gray-50 rounded-lg\"></th>\n              <th className=\"bg-gray-50 rounded-lg\"></th>\n            </tr>\n            <tr className=\"bg-gray-200\">\n              <th className=\"py-3 rounded-tl-lg\"></th>\n              {/* <th className=\"px-8 py-3\">ID</th> */}\n              <th className=\"pr-20 pl-5 py-3 p-\">GERMAN</th>\n              <th className=\"py-3 rounded-tr-lg\">ENGLISH</th>\n            </tr>\n          </thead>\n          <tbody>\n            {vocabulary.map(item => (\n              <tr className=\"border-b\">\n                <td className=\"p-4\">\n                  <div className=\"flex items-center\">\n                    <input id=\"checkbox-table-search-1\" type=\"checkbox\" className=\"w-4 h-4 text-gray-800 bg-white border-gray-300 rounded accent-gray-800 focus:ring-gray-800\" />\n                    <label for=\"checkbox-table-search-1\" className=\"sr-only\">checkbox</label>\n                  </div>\n                </td>\n                {/* <th scope=\"row\" className=\"px-8 py-3\">\n                  {item.id}\n                </th> */}\n                <td className=\"pr-20 pl-5 py-3\">\n                  {item.english}\n                </td>\n                <td className=\"py-3\">\n                  {item.german}\n                </td>\n              </tr>))}\n          </tbody>\n        </table>\n      </div>\n    </>\n  )\n}\n\n\n","/Users/timruttinger/Documents/Career/Projects/dola/client/src/Pages/Register.js",["58","59"],[],"import '../dist/output.css';\nimport { useState } from 'react';\nimport { redirect } from \"react-router-dom\";\n\n\nfunction isEmpty(obj) {\n    return Object.keys(obj).length === 0;\n  }\n\nexport default function Register(){\n    const [error, setError] = useState({ email: null, password: null , confirmedPassword: null});\n    const [state, setState] = useState({ email: '', password: ''});\n\n    const validateEmail = (email) => {\n        return String(email)\n          .toLowerCase()\n          .match(\n            /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n          );\n      };\n\n\n    async function handleSubmit(event) {\n        event.preventDefault();\n        \n        if (!validateEmail(event.target.email.value)) {\n            setError({ email: 'Invalid Email', password: error.password, confirmedPassword: error.confirmedPassword });\n        }\n\n        if (event.target.password.value.length < 8) {\n            setError({ email: error.email, password: 'Password must be at least 8 characters long', confirmedPassword: error.confirmedPassword });\n        }\n\n        if (event.target.confirmedPassword.value != event.target.password.value) {\n            setError({ email: error.email, password: error.password, confirmedPassword: 'Passwords do not match' });\n        }\n        \n        if (!isEmpty(error)){\n            setState({ email: event.target.email.value, password: event.target.password.value })\n        }\n        const res = await fetch('http://localhost:8000/api/register', { mode: \"cors\", headers: {'Content-Type': 'application/json'}, method: 'post', body: JSON.stringify(state)});\n        // const requestConfig = { header: {'Content-Type': 'application/json'}, method: 'post', body: JSON.stringify(state) };\n        // const res = await fetch('http://localhost:8000/api/register', requestConfig);\n        if(!res.ok) {\n            throw new Error(res.status);\n        }\n        else {\n            redirect(\"/login\");\n        }\n    }\n\n\n    return(\n        <>\n            <section className=\"bg-gray-50 dark:bg-gray-900\">\n                <div className=\"flex flex-col items-center justify-center px-6 py-8 mx-auto md:h-screen lg:py-0\">\n                    <div className=\"w-full bg-white rounded-lg shadow dark:border md:mt-0 sm:max-w-md xl:p-0 dark:bg-gray-800 dark:border-gray-700\">\n                        <div className=\"p-6 space-y-4 md:space-y-6 sm:p-8\">\n                            <h1 className=\"text-xl font-bold leading-tight tracking-tight text-gray-900 md:text-2xl dark:text-white\">\n                                Register your account\n                            </h1>\n                            <form className=\"space-y-4 md:space-y-6\" action=\"#\" onSubmit={handleSubmit}>\n                                <div>\n                                    <label htmlFor=\"email\" className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-white\">Your email</label>\n                                    <input type=\"email\" name=\"email\" id=\"email\" className=\"bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\" placeholder=\"name@company.com\" required=\"\" />\n                                </div>\n                                {error.email && <div style={{ color: 'red' }}>{error.email}</div>}\n                                <div>\n                                    <label htmlFor=\"password\" className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-white\">Password</label>\n                                    <input type=\"password\" name=\"password\" id=\"password\" placeholder=\"••••••••\" className=\"bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\" required=\"\" />\n                                </div>\n                                {error.password && <div style={{ color: 'red' }}>{error.password}</div>}\n                                <div>\n                                    <label htmlFor=\"password\" className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-white\">Confirm password</label>\n                                    <input type=\"password\" name=\"confirmedPassword\" id=\"confirmedPassword\" placeholder=\"••••••••\" className=\"bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\" required=\"\" />\n                                </div>\n                                {error.confirmedPassword && <div style={{ color: 'red' }}>{error.confirmedPassword}</div>}\n                                <div className=\"flex items-center justify-between\">\n                                    <div className=\"flex items-start\">\n                                        <div className=\"flex items-center h-5\">\n                                            <input id=\"remember\" aria-describedby=\"remember\" type=\"checkbox\" className=\"w-4 h-4 border border-gray-300 rounded bg-gray-50 focus:ring-3 focus:ring-primary-300 dark:bg-gray-700 dark:border-gray-600 dark:focus:ring-primary-600 dark:ring-offset-gray-800\" required=\"\" />\n                                        </div>\n                                        <div className=\"ml-3 text-sm\">\n                                            <label htmlFor=\"remember\" className=\"text-gray-500 dark:text-gray-300\">I accept the Terms and Conditions</label>\n                                        </div>\n                                    </div>\n                                    <a href=\"#\" className=\"text-sm font-medium text-primary-600 hover:underline dark:text-primary-500\">Forgot password?</a>\n                                </div>\n                                <button type=\"submit\" className=\"w-full text-black bg-primary-600 hover:bg-primary-700 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800\">Sign in</button>\n                                <p className=\"text-sm font-light text-gray-500 dark:text-gray-400\">\n                                    Already have an account? <a href=\"/profile\" className=\"font-medium text-primary-600 hover:underline dark:text-primary-500\">Login here</a>\n                                </p>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </section>\n        </>\n    )\n}","/Users/timruttinger/Documents/Career/Projects/dola/client/src/Pages/Quizz.js",["60","61"],[],"import React, { useState, useEffect } from 'react';\nimport '../dist/output.css';\n\n\nexport default function Quizz({ domain }) {\n    return (\n        <>\n            <Flashcard domain={domain} />\n        </>\n    );\n}\n\n\nfunction Flashcard({ domain }) {\n    const [vocabID, setVocabID] = useState(1);\n    const [vocabGerman, setVocabGerman] = useState('');\n    const [vocabEnglish, setVocabEnglish] = useState('');\n    const [mode, setMode] = useState(0);\n\n    useEffect(() => {\n        async function fetchData() {\n            const res = await fetch(`http://localhost:8000/api/quizz?id=${vocabID}&domain=${domain}`);\n            const data = await res.json();\n            setVocabID(vocabID + 1);\n            setVocabGerman(data.german);\n            setVocabEnglish(data.english);\n        }\n        fetchData();\n    }, []);\n\n    async function handleClick() {\n        const res = await fetch(`http://localhost:8000/api/quizz?id=${vocabID}&domain=${domain}`);\n        const data = await res.json();\n        setVocabID(vocabID + 1);\n        setVocabGerman(data.german);\n        setVocabEnglish(data.english);\n    }\n    console.log(vocabID);\n\n\n    return (\n        <>\n            <div className=\"relative w-[560px] h-[350px] top-1/3 left-1/2 -translate-x-1/2 -translate-y-1/2\">\n                {mode === 0 ?\n                    <button onClick={() => setMode(1)} className=\" text-7xl w-full h-full relative rounded bg-gray-800 text-white\">\n                        {vocabEnglish}\n                    </button> :\n                    <button onClick={() => setMode(0)} className=\"text-7xl w-full h-full relative rounded  bg-green-500 text-white\">\n                        {vocabGerman}\n                    </button>}\n            </div>\n            <Example domain={domain} vocabID={vocabID}/>\n        </>\n    );\n}\nfunction Example({ domain, vocabID }) {\n    const [example, setExample] = React.useState('');\n\n    async function handleClick() {\n        const res = await fetch(`http://localhost:8000/api/example?id=${vocabID}&domain=${domain}`);\n        const data = await res.json();\n        setExample(data.example);\n    }\n\n    return (\n        <div className=\"relative w-[600px] h-[120px] border-gray-800 border-4 top-[12%] -translate-x-1/2 left-1/2\">\n            <button className=\"text-white bg-gray-800 hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-300 font-medium rounded-lg text-sm px-3 py-2 mr-2 mb-2\" onClick={handleClick}>Generate</button>\n            <div>\n                {example}\n            </div>\n        </div>\n    )\n}","/Users/timruttinger/Documents/Career/Projects/dola/client/src/Pages/Login.js",["62"],[],"import '../dist/output.css';\nimport { useState } from 'react';\nimport { redirect } from \"react-router-dom\";\n\n\nfunction isEmpty(obj) {\n    return Object.keys(obj).length === 0;\n  }\n\nexport default function Login(){\n    const [error, setError] = useState({ email: null, password: null});\n    const [state, setState] = useState({ email: '', password: ''});\n\n    const validateEmail = (email) => {\n        return String(email)\n          .toLowerCase()\n          .match(\n            /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n          );\n      };\n\n\n    async function handleSubmit(event) {\n        event.preventDefault();\n        \n        if (!validateEmail(event.target.email.value)) {\n            setError({ email: 'Invalid Email', password: error.password});\n        }\n\n        if (!isEmpty(error)){\n            setState({ email: event.target.email.value, password: event.target.password.value })\n        }\n        const res = await fetch('http://localhost:8000/api/login', { mode: \"cors\", headers: {'Content-Type': 'application/json'}, method: 'post', body: JSON.stringify(state)});\n        if(!res.ok) {\n            throw new Error(res.status);\n        }\n        else {\n            redirect(\"/login\");\n        }\n    }\n\n\n    return(\n        <>\n            <section className=\"bg-gray-50 dark:bg-gray-900\">\n                <div className=\"flex flex-col items-center justify-center px-6 py-8 mx-auto md:h-screen lg:py-0\">\n                    <div className=\"w-full bg-white rounded-lg shadow dark:border md:mt-0 sm:max-w-md xl:p-0 dark:bg-gray-800 dark:border-gray-700\">\n                        <div className=\"p-6 space-y-4 md:space-y-6 sm:p-8\">\n                            <h1 className=\"text-xl font-bold leading-tight tracking-tight text-gray-900 md:text-2xl dark:text-white\">\n                                Sign in to your account\n                            </h1>\n                            <form className=\"space-y-4 md:space-y-6\" action=\"#\" onSubmit={handleSubmit}>\n                                <div>\n                                    <label htmlFor=\"email\" className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-white\">Your email</label>\n                                    <input type=\"email\" name=\"email\" id=\"email\" className=\"bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\" placeholder=\"name@company.com\" required=\"\" />\n                                </div>\n                                {error.email && <div style={{ color: 'red' }}>{error.email}</div>}\n                                <div>\n                                    <label htmlFor=\"password\" className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-white\">Password</label>\n                                    <input type=\"password\" name=\"password\" id=\"password\" placeholder=\"••••••••\" className=\"bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\" required=\"\" />\n                                </div>\n                                {error.password && <div style={{ color: 'red' }}>{error.password}</div>}\n                                <div className=\"flex items-center justify-between\">\n                                    <div className=\"flex items-start\">\n                                        <div className=\"flex items-center h-5\">\n                                            <input id=\"remember\" aria-describedby=\"remember\" type=\"checkbox\" className=\"w-4 h-4 border border-gray-300 rounded bg-gray-50 focus:ring-3 focus:ring-primary-300 dark:bg-gray-700 dark:border-gray-600 dark:focus:ring-primary-600 dark:ring-offset-gray-800\" required=\"\" />\n                                        </div>\n                                        <div className=\"ml-3 text-sm\">\n                                            <label htmlFor=\"remember\" className=\"text-gray-500 dark:text-gray-300\">Remember me</label>\n                                        </div>\n                                    </div>\n                                    <a href=\"#\" className=\"text-sm font-medium text-primary-600 hover:underline dark:text-primary-500\">Forgot password?</a>\n                                </div>\n                                <button type=\"submit\" className=\"w-full text-black bg-primary-600 hover:bg-primary-700 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800\">Sign in</button>\n                                <p className=\"text-sm font-light text-gray-500 dark:text-gray-400\">\n                                    Don’t have an account yet? <a href=\"/register\" className=\"font-medium text-primary-600 hover:underline dark:text-primary-500\">Sign up</a>\n                                </p>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </section>\n        </>\n    )\n}",{"ruleId":"63","severity":1,"message":"64","line":2,"column":8,"nodeType":"65","messageId":"66","endLine":2,"endColumn":17},{"ruleId":"63","severity":1,"message":"67","line":3,"column":8,"nodeType":"65","messageId":"66","endLine":3,"endColumn":11},{"ruleId":"63","severity":1,"message":"68","line":4,"column":8,"nodeType":"65","messageId":"66","endLine":4,"endColumn":14},{"ruleId":"63","severity":1,"message":"69","line":5,"column":8,"nodeType":"65","messageId":"66","endLine":5,"endColumn":19},{"ruleId":"63","severity":1,"message":"70","line":7,"column":10,"nodeType":"65","messageId":"66","endLine":7,"endColumn":17},{"ruleId":"63","severity":1,"message":"71","line":9,"column":9,"nodeType":"65","messageId":"66","endLine":9,"endColumn":15},{"ruleId":"63","severity":1,"message":"72","line":46,"column":9,"nodeType":"65","messageId":"66","endLine":46,"endColumn":21},{"ruleId":"73","severity":1,"message":"74","line":65,"column":11,"nodeType":"75","endLine":65,"endColumn":53},{"ruleId":"73","severity":1,"message":"74","line":99,"column":17,"nodeType":"75","endLine":99,"endColumn":73},{"ruleId":"76","severity":1,"message":"77","line":36,"column":19,"nodeType":"75","endLine":36,"endColumn":44},{"ruleId":"78","severity":1,"message":"79","line":34,"column":50,"nodeType":"80","messageId":"81","endLine":34,"endColumn":52},{"ruleId":"76","severity":1,"message":"77","line":87,"column":37,"nodeType":"75","endLine":87,"endColumn":136},{"ruleId":"82","severity":1,"message":"83","line":29,"column":8,"nodeType":"84","endLine":29,"endColumn":10,"suggestions":"85"},{"ruleId":"63","severity":1,"message":"86","line":31,"column":20,"nodeType":"65","messageId":"66","endLine":31,"endColumn":31},{"ruleId":"76","severity":1,"message":"77","line":72,"column":37,"nodeType":"75","endLine":72,"endColumn":136},"no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'Nav' is defined but never used.","'Navbar' is defined but never used.","'NavDropdown' is defined but never used.","'NavLink' is defined but never used.","'Helmet' is defined but never used.","'handleSelect' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'domain' and 'vocabID'. Either include them or remove the dependency array. You can also do a functional update 'setVocabID(v => ...)' if you only need 'vocabID' in the 'setVocabID' call.","ArrayExpression",["87"],"'handleClick' is defined but never used.",{"desc":"88","fix":"89"},"Update the dependencies array to be: [domain, vocabID]",{"range":"90","text":"91"},[816,818],"[domain, vocabID]"]