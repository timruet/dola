[{"/Users/timruttinger/Documents/Career/Projects/dola/client/src/index.js":"1","/Users/timruttinger/Documents/Career/Projects/dola/client/src/reportWebVitals.js":"2","/Users/timruttinger/Documents/Career/Projects/dola/client/src/App.js":"3","/Users/timruttinger/Documents/Career/Projects/dola/client/src/Pages/Home.js":"4","/Users/timruttinger/Documents/Career/Projects/dola/client/src/Pages/Quizz.js":"5","/Users/timruttinger/Documents/Career/Projects/dola/client/src/Pages/Login.js":"6","/Users/timruttinger/Documents/Career/Projects/dola/client/src/Pages/Register.js":"7","/Users/timruttinger/Documents/Career/Projects/dola/client/src/Pages/Vocabulary.js":"8","/Users/timruttinger/Documents/Career/Projects/dola/client/src/store.js":"9","/Users/timruttinger/Documents/Career/Projects/dola/client/src/authService.js":"10","/Users/timruttinger/Documents/Career/Projects/dola/client/src/authSlice.js":"11"},{"size":765,"mtime":1718390635197,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1692298254163,"results":"14","hashOfConfig":"13"},{"size":4119,"mtime":1718468738351,"results":"15","hashOfConfig":"13"},{"size":4647,"mtime":1718395232573,"results":"16","hashOfConfig":"13"},{"size":2545,"mtime":1699209880333,"results":"17","hashOfConfig":"13"},{"size":5751,"mtime":1718447003504,"results":"18","hashOfConfig":"13"},{"size":7349,"mtime":1718357965432,"results":"19","hashOfConfig":"13"},{"size":2861,"mtime":1699209916907,"results":"20","hashOfConfig":"13"},{"size":172,"mtime":1718390559586,"results":"21","hashOfConfig":"13"},{"size":1300,"mtime":1718468213977,"results":"22","hashOfConfig":"13"},{"size":771,"mtime":1718468339373,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"8jnuko",{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"27"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"27"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"27"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"27"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/timruttinger/Documents/Career/Projects/dola/client/src/index.js",[],[],[],"/Users/timruttinger/Documents/Career/Projects/dola/client/src/reportWebVitals.js",[],[],"/Users/timruttinger/Documents/Career/Projects/dola/client/src/App.js",["62","63","64","65","66","67","68","69","70","71","72","73"],[],"/Users/timruttinger/Documents/Career/Projects/dola/client/src/Pages/Home.js",["74"],[],"import '../dist/output.css';\nimport volcano from \"../images/volcano-cropped.png\"\n\nimport { useState } from 'react';\nimport { TrashIcon } from '@heroicons/react/16/solid'\n\nexport default function Home() {\n\n    return (\n        <>\n            <div className=\"h-[26em] w-full bg-cover bg-home\">\n                <div className=\"h-full w-full backdrop-blur flex justify-evenly items-center\">\n                    <Logo />\n                    <DomainsSelect />\n                </div>\n                <div className=\"h-fit flex text-center justify-center flex-grow\">\n                    <span className=\"w-fit flex text-black font-semibold py-12 px-24\">Select a pre-made domain containing over a 100 of the most important words</span>\n                    <span className=\"w-fit flex text-black font-semibold py-12 px-24\">Use AI to create a vocabulary list for a domain of your choosing</span>\n                    <span className=\"w-fit flex text-black font-semibold py-12 px-24\">Add or delete words that are important to you or your business</span>\n                </div>\n            </div>\n        </>\n    )\n};\n\n\nfunction DomainsSelect() {\n    const [domains, setDomains] = useState([\"Construction\", \"Eldercare\"]);\n\n    function handleSubmit(event) {\n        event.preventDefault();\n        const input = event.target[0].value;\n        setDomains(domains.concat(input));\n    }\n\n    function handleRemove(event, domain) {\n        event.preventDefault();\n        const newDomains = domains.filter((item) => item !== domain);\n        setDomains(newDomains);\n    }\n\n    return (\n        <div className=\"relative w-fit h-fit max-w-md\">\n            <div className=\"relative bg-white shadow-md rounded-lg px-3 py-2 w-96\">\n                <div className=\"block text-gray-700 text-lg font-semibold py-2 px-2\">\n                    Domains\n                </div>\n                <div className=\"flex items-center bg-gray-200 rounded-md\">\n                    <div className=\"pl-2\">\n                        <svg className=\"fill-current text-gray-500 w-6 h-6\" xmlns=\"http://www.w3.org/2000/svg\"\n                            viewBox=\"0 0 24 24\">\n                            <path className=\"heroicon-ui\"\n                                d=\"M16.32 14.9l5.39 5.4a1 1 0 0 1-1.42 1.4l-5.38-5.38a8 8 0 1 1 1.41-1.41zM10 16a6 6 0 1 0 0-12 6 6 0 0 0 0 12z\" />\n                        </svg>\n                    </div>\n                    <form onSubmit={(event) => handleSubmit(event)} className=\"flex w-full\">\n                        <input className=\"w-full rounded-md bg-gray-200 text-gray-700 leading-tight focus:outline-none py-2 px-2\"\n                            id=\"search\" type=\"text\" placeholder=\"Pick or add a domain\" />\n                        <button type=\"submit\" className=\"ml-auto bg-gray-700 hover:bg-gray-500 text-white font-bold py-1 px-3 rounded\">\n                            Add\n                        </button>\n                    </form>\n                </div>\n                <div className=\"h-[10rem] min-h-[10rem] py-3 text-sm overflow-y-auto\">\n                    {domains.map(domain => (\n                        <div key={domain} className=\"flex py-2\">\n                            <span className=\"bg-gray-400 h-2 w-2 m-2 rounded-full\"></span>\n                            <a href={`domain/${domain}`.toLowerCase()} className=\"text-gray-700 hover:text-blue-400\">\n                                <span className=\"relative top-[2px] w-fit font-medium px-2\">{domain}</span>\n                            </a>\n                            <button type=\"button\" onClick={(event) => handleRemove(event, domain)} className=\"top-[2px] ml-auto cursor-pointer text-gray-700 hover:text-blue-400 rounded-md px-1 py-1\"><TrashIcon className=\"h-[16px] w-[16px]\" /></button>\n                        </div>\n                    ))}\n                </div>\n                {/* <div className=\"block bg-gray-200 text-sm text-right py-2 px-3 -mx-3 -mb-2 rounded-b-lg\">\n                    <button className=\"bg-gray-700 hover:bg-gray-500 text-white font-bold py-2 px-4 rounded\">\n                        Edit\n                    </button>\n                </div> */}\n            </div>\n        </div>\n    )\n};\n\nfunction Logo() {\n    return (\n        <div className=\"relative w-fit h-fit\">\n            <div className=\"text-center\">\n                <img src={volcano} className=\"h-28 mr-3 inline-block\" />\n                <span className=\"text-8xl font-semibold text-white align-middle inline-block\">dola</span>\n            </div>\n            <span className=\"align-middle text-xl font-semibold text-white block p-3\">domain specific language learning</span>\n        </div>\n    )\n}","/Users/timruttinger/Documents/Career/Projects/dola/client/src/Pages/Quizz.js",["75","76"],[],"import React, { useState, useEffect } from 'react';\nimport '../dist/output.css';\n\n\nexport default function Quizz({ domain }) {\n    return (\n        <>\n            <Flashcard domain={domain} />\n        </>\n    );\n}\n\n\nfunction Flashcard({ domain }) {\n    const [vocabID, setVocabID] = useState(1);\n    const [vocabGerman, setVocabGerman] = useState('');\n    const [vocabEnglish, setVocabEnglish] = useState('');\n    const [mode, setMode] = useState(0);\n\n    useEffect(() => {\n        async function fetchData() {\n            const res = await fetch(`http://localhost:8000/api/quizz?id=${vocabID}&domain=${domain}`);\n            const data = await res.json();\n            setVocabID(vocabID + 1);\n            setVocabGerman(data.german);\n            setVocabEnglish(data.english);\n        }\n        fetchData();\n    }, []);\n\n    async function handleClick() {\n        const res = await fetch(`http://localhost:8000/api/quizz?id=${vocabID}&domain=${domain}`);\n        const data = await res.json();\n        setVocabID(vocabID + 1);\n        setVocabGerman(data.german);\n        setVocabEnglish(data.english);\n    }\n    console.log(vocabID);\n\n\n    return (\n        <>\n            <div className=\"relative w-[560px] h-[350px] top-1/3 left-1/2 -translate-x-1/2 -translate-y-1/2\">\n                {mode === 0 ?\n                    <button onClick={() => setMode(1)} className=\" text-7xl w-full h-full relative rounded bg-gray-800 text-white\">\n                        {vocabEnglish}\n                    </button> :\n                    <button onClick={() => setMode(0)} className=\"text-7xl w-full h-full relative rounded  bg-green-500 text-white\">\n                        {vocabGerman}\n                    </button>}\n            </div>\n            <Example domain={domain} vocabID={vocabID}/>\n        </>\n    );\n}\nfunction Example({ domain, vocabID }) {\n    const [example, setExample] = React.useState('');\n\n    async function handleClick() {\n        const res = await fetch(`http://localhost:8000/api/example?id=${vocabID}&domain=${domain}`);\n        const data = await res.json();\n        setExample(data.example);\n    }\n\n    return (\n        <div className=\"relative w-[600px] h-[120px] border-gray-800 border-4 top-[12%] -translate-x-1/2 left-1/2\">\n            <button className=\"text-white bg-gray-800 hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-300 font-medium rounded-lg text-sm px-3 py-2 mr-2 mb-2\" onClick={handleClick}>Generate</button>\n            <div>\n                {example}\n            </div>\n        </div>\n    )\n}","/Users/timruttinger/Documents/Career/Projects/dola/client/src/Pages/Login.js",["77","78","79"],[],"/Users/timruttinger/Documents/Career/Projects/dola/client/src/Pages/Register.js",["80","81","82","83","84"],[],"import '../dist/output.css';\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n\nfunction isEmpty(obj) {\n    return Object.keys(obj).length === 0;\n  }\n\nexport default function Register(){\n    const [error, setError] = useState({ email: null, password: null , confirmedPassword: null});\n    const [loginData, setLoginData] = useState({ email: '', password: ''});\n    const navigate = useNavigate();\n\n    const validateEmail = (email) => {\n        return String(email)\n          .toLowerCase()\n          .match(\n            /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n          );\n      };\n\n\n    async function handleSubmit(event) {\n        event.preventDefault();\n        \n        if (!validateEmail(event.target.email.value)) {\n            setError({ email: 'Invalid Email', password: error.password, confirmedPassword: error.confirmedPassword });\n        }\n\n        if (event.target.password.value.length < 8) {\n            setError({ email: error.email, password: 'Password must be at least 8 characters long', confirmedPassword: error.confirmedPassword });\n        }\n\n        if (event.target.confirmedPassword.value != event.target.password.value) {\n            setError({ email: error.email, password: error.password, confirmedPassword: 'Passwords do not match' });\n        }\n        \n        if (!isEmpty(error)){\n            setLoginData({ email: event.target.email.value, password: event.target.password.value })\n        }\n        //setState is asynchronous but doesnt return a promise or anything else and thus await doesnt always work\n        const userdata = { email: event.target.email.value, password: event.target.password.value };\n        let res = await fetch('http://localhost:8000/api/register', { mode: \"cors\", headers: {'Content-Type': 'application/json'}, method: 'post', body: JSON.stringify(userdata)});\n        console.log(res.status);\n        if(res.status == 200) {\n            res = await res.json();\n            console.log(res);\n            setError({ email: res, password: error.password, confirmedPassword: error.confirmedPassword });\n        }\n        else if(res.status == 201){\n            console.log(res.status);\n            navigate('/login');\n        }\n        else {\n            throw new Error(res.status);\n        }\n    }\n\n\n    return(\n        <>\n            <section className=\"bg-gray-50 dark:bg-gray-900\">\n                <div className=\"flex flex-col items-center justify-center px-6 py-8 mx-auto md:h-screen lg:py-0\">\n                    <div className=\"w-full bg-white rounded-lg shadow dark:border md:mt-0 sm:max-w-md xl:p-0 dark:bg-gray-800 dark:border-gray-700\">\n                        <div className=\"p-6 space-y-4 md:space-y-6 sm:p-8\">\n                            <h1 className=\"text-xl font-bold leading-tight tracking-tight text-gray-900 md:text-2xl dark:text-white\">\n                                Register your account\n                            </h1>\n                            <form className=\"space-y-4 md:space-y-6\" action=\"#\" onSubmit={handleSubmit}>\n                                <div>\n                                    <label htmlFor=\"email\" className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-white\">Your email</label>\n                                    <input type=\"email\" name=\"email\" id=\"email\" className=\"bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\" placeholder=\"name@company.com\" required=\"\" />\n                                </div>\n                                {error.email && <div style={{ color: 'red' }}>{error.email}</div>}\n                                <div>\n                                    <label htmlFor=\"password\" className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-white\">Password</label>\n                                    <input type=\"password\" name=\"password\" id=\"password\" placeholder=\"••••••••\" className=\"bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\" required=\"\" />\n                                </div>\n                                {error.password && <div style={{ color: 'red' }}>{error.password}</div>}\n                                <div>\n                                    <label htmlFor=\"password\" className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-white\">Confirm password</label>\n                                    <input type=\"password\" name=\"confirmedPassword\" id=\"confirmedPassword\" placeholder=\"••••••••\" className=\"bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\" required=\"\" />\n                                </div>\n                                {error.confirmedPassword && <div style={{ color: 'red' }}>{error.confirmedPassword}</div>}\n                                <div className=\"flex items-center justify-between\">\n                                    <div className=\"flex items-start\">\n                                        <div className=\"flex items-center h-5\">\n                                            <input id=\"remember\" aria-describedby=\"remember\" type=\"checkbox\" className=\"w-4 h-4 border border-gray-300 rounded bg-gray-50 focus:ring-3 focus:ring-primary-300 dark:bg-gray-700 dark:border-gray-600 dark:focus:ring-primary-600 dark:ring-offset-gray-800\" required=\"\" />\n                                        </div>\n                                        <div className=\"ml-3 text-sm\">\n                                            <label htmlFor=\"remember\" className=\"text-gray-500 dark:text-gray-300\">I accept the Terms and Conditions</label>\n                                        </div>\n                                    </div>\n                                    <a href=\"#\" className=\"text-sm font-medium text-primary-600 hover:underline dark:text-primary-500\">Forgot password?</a>\n                                </div>\n                                <button type=\"submit\" className=\"w-full text-black bg-primary-600 hover:bg-primary-700 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800\">Sign in</button>\n                                <p className=\"text-sm font-light text-gray-500 dark:text-gray-400\">\n                                    Already have an account? <a href=\"/login\" className=\"font-medium text-primary-600 hover:underline dark:text-primary-500\">Login here</a>\n                                </p>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </section>\n        </>\n    )\n}","/Users/timruttinger/Documents/Career/Projects/dola/client/src/Pages/Vocabulary.js",["85"],[],"import React, { useState, useEffect } from 'react';\nimport '../dist/output.css';\n\n\n\nexport default function Vocabulary({ domain }) {\n\n  return (\n    <>\n      <VocabTable domain={domain} />\n    </>\n  )\n}\n\n\nfunction VocabTable({ domain }) {\n  const [vocabulary, setVocabulary] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const res = await fetch(`http://localhost:8000/api/table?domain=${domain}`);\n      const data = await res.json();\n      setVocabulary(data);\n    }\n    fetchData();\n  }, [domain]);\n\n  return (\n    <>\n      <div className=\"relative justify-center flex p-4\">\n        <table class=\"table-fixed bg-white second:rounded-tl-lg second:rounded-tr-lg last:rounded-bl-lg last:rounded-br-lg border-collapse\">\n          <thead>\n            <tr className= \"p-3 border-b-8 bg-gray-200\">\n              <th className=\"bg-gray-50 rounded-lg\">\n                <button className=\"text-white bg-gray-800 hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-300 font-medium rounded-lg text-sm px-3 py-2 mr-2 mb-2\">\n                  <a href=\"#\" className=\"\">Edit</a>\n                </button>\n              </th>\n              <th className=\"bg-gray-50 rounded-lg\">\n                <button className=\"text-white bg-gray-800 hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-300 font-medium rounded-lg text-sm px-3 py-2 mr-2 mb-2\">\n                  <a href={`/domain/${domain}/quizz`} className=\"\">Study</a>\n                </button>\n              </th>\n              <th className=\"bg-gray-50 rounded-lg\"></th>\n              <th className=\"bg-gray-50 rounded-lg\"></th>\n            </tr>\n            <tr className=\"bg-gray-200\">\n              <th className=\"py-3 rounded-tl-lg\"></th>\n              {/* <th className=\"px-8 py-3\">ID</th> */}\n              <th className=\"pr-20 pl-5 py-3 p-\">GERMAN</th>\n              <th className=\"py-3 rounded-tr-lg\">ENGLISH</th>\n            </tr>\n          </thead>\n          <tbody>\n            {vocabulary.map(item => (\n              <tr className=\"border-b\">\n                <td className=\"p-4\">\n                  <div className=\"flex items-center\">\n                    <input id=\"checkbox-table-search-1\" type=\"checkbox\" className=\"w-4 h-4 text-gray-800 bg-white border-gray-300 rounded accent-gray-800 focus:ring-gray-800\" />\n                    <label for=\"checkbox-table-search-1\" className=\"sr-only\">checkbox</label>\n                  </div>\n                </td>\n                {/* <th scope=\"row\" className=\"px-8 py-3\">\n                  {item.id}\n                </th> */}\n                <td className=\"pr-20 pl-5 py-3\">\n                  {item.english}\n                </td>\n                <td className=\"py-3\">\n                  {item.german}\n                </td>\n              </tr>))}\n          </tbody>\n        </table>\n      </div>\n    </>\n  )\n}\n\n\n","/Users/timruttinger/Documents/Career/Projects/dola/client/src/store.js",[],[],"/Users/timruttinger/Documents/Career/Projects/dola/client/src/authService.js",["86"],[],"/Users/timruttinger/Documents/Career/Projects/dola/client/src/authSlice.js",[],[],{"ruleId":"87","severity":1,"message":"88","line":2,"column":8,"nodeType":"89","messageId":"90","endLine":2,"endColumn":17},{"ruleId":"87","severity":1,"message":"91","line":3,"column":8,"nodeType":"89","messageId":"90","endLine":3,"endColumn":11},{"ruleId":"87","severity":1,"message":"92","line":4,"column":8,"nodeType":"89","messageId":"90","endLine":4,"endColumn":14},{"ruleId":"87","severity":1,"message":"93","line":5,"column":8,"nodeType":"89","messageId":"90","endLine":5,"endColumn":19},{"ruleId":"87","severity":1,"message":"94","line":7,"column":10,"nodeType":"89","messageId":"90","endLine":7,"endColumn":17},{"ruleId":"87","severity":1,"message":"95","line":9,"column":10,"nodeType":"89","messageId":"90","endLine":9,"endColumn":16},{"ruleId":"87","severity":1,"message":"96","line":10,"column":10,"nodeType":"89","messageId":"90","endLine":10,"endColumn":18},{"ruleId":"87","severity":1,"message":"97","line":11,"column":23,"nodeType":"89","messageId":"90","endLine":11,"endColumn":34},{"ruleId":"87","severity":1,"message":"98","line":13,"column":8,"nodeType":"89","messageId":"90","endLine":13,"endColumn":15},{"ruleId":"87","severity":1,"message":"99","line":52,"column":9,"nodeType":"89","messageId":"90","endLine":52,"endColumn":13},{"ruleId":"100","severity":1,"message":"101","line":64,"column":15,"nodeType":"102","endLine":64,"endColumn":57},{"ruleId":"100","severity":1,"message":"101","line":84,"column":15,"nodeType":"102","endLine":84,"endColumn":57},{"ruleId":"100","severity":1,"message":"101","line":89,"column":17,"nodeType":"102","endLine":89,"endColumn":73},{"ruleId":"103","severity":1,"message":"104","line":29,"column":8,"nodeType":"105","endLine":29,"endColumn":10,"suggestions":"106"},{"ruleId":"87","severity":1,"message":"107","line":31,"column":20,"nodeType":"89","messageId":"90","endLine":31,"endColumn":31},{"ruleId":"87","severity":1,"message":"108","line":4,"column":10,"nodeType":"89","messageId":"90","endLine":4,"endColumn":21},{"ruleId":"87","severity":1,"message":"97","line":5,"column":10,"nodeType":"89","messageId":"90","endLine":5,"endColumn":21},{"ruleId":"109","severity":1,"message":"110","line":78,"column":37,"nodeType":"102","endLine":78,"endColumn":136},{"ruleId":"87","severity":1,"message":"111","line":12,"column":12,"nodeType":"89","messageId":"90","endLine":12,"endColumn":21},{"ruleId":"112","severity":1,"message":"113","line":35,"column":50,"nodeType":"114","messageId":"115","endLine":35,"endColumn":52},{"ruleId":"112","severity":1,"message":"116","line":46,"column":23,"nodeType":"114","messageId":"115","endLine":46,"endColumn":25},{"ruleId":"112","severity":1,"message":"116","line":51,"column":28,"nodeType":"114","messageId":"115","endLine":51,"endColumn":30},{"ruleId":"109","severity":1,"message":"110","line":95,"column":37,"nodeType":"102","endLine":95,"endColumn":136},{"ruleId":"109","severity":1,"message":"110","line":36,"column":19,"nodeType":"102","endLine":36,"endColumn":44},{"ruleId":"87","severity":1,"message":"117","line":2,"column":10,"nodeType":"89","messageId":"90","endLine":2,"endColumn":21},"no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'Nav' is defined but never used.","'Navbar' is defined but never used.","'NavDropdown' is defined but never used.","'NavLink' is defined but never used.","'Helmet' is defined but never used.","'useState' is defined but never used.","'useDispatch' is defined but never used.","'Cookies' is defined but never used.","'user' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'domain' and 'vocabID'. Either include them or remove the dependency array. You can also do a functional update 'setVocabID(v => ...)' if you only need 'vocabID' in the 'setVocabID' call.","ArrayExpression",["118"],"'handleClick' is defined but never used.","'authService' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'loginData' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'useNavigate' is defined but never used.",{"desc":"119","fix":"120"},"Update the dependencies array to be: [domain, vocabID]",{"range":"121","text":"122"},[816,818],"[domain, vocabID]"]